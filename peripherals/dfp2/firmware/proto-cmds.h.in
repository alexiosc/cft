#ifndef __PROTO_CMDS_H
#define __PROTO_CMDS_H

#define NL "\n201"

#define CMD_SIZE 8
static const struct {
	char cmd[CMD_SIZE];
	void (*handler)();
	char *help;
} cmds[] PROGMEM = {
	{"?",       say_help,    "-- Show help"},
	{"help",    say_help,    "-- Show help"},
	{"ver",     say_version, "-- Show version"},
	{"buf",     say_bufsize, "-- Show size of command buffer"},
	{"term",    gs_term,     "[ BOOL ] -- Get/set terminal bells & whistles."},
	{"echo",    gs_echo,     "[ BOOL ] -- Get/set local echo."},
	{"mesg",    gs_mesg,     "[ BOOL ] -- Get/set async messages." NL },

	// Front panel functionality

	{"fpr",     go_fpr,      "[ BYTE ] -- Read from FP Bus Address"},
	{"fpdump",  go_fpdump,   "-- Dump full FP address space"},
       	{"dsr",     gs_dsr,      "[ WORD | - ] -- Get, read, or override the DIP Switches"},
       	{"sws",     go_sws,      "-- Show Switch state"},
       	{"swtest",  go_swtest,   "-- Test switch assembly and OR"},
       	{"ltest",   go_ltest,    "-- Light test" NL },

 	// Buses

       	{"ibus",    say_ibus,    "-- Read IBus"},
       	{"abus",    say_abus,    "-- Read Address bus"},
       	{"dbus",    say_dbus,    "-- Read Data bus" NL},

	// Registers
	{"ir",      gs_ir,       "[ WORD ] -- Get/set IR"},
	{"pc",      gs_pc,       "[ WORD ] -- Get/set Program Counter"},
	{"dr",      gs_dr,       "[ WORD ] -- Get/set Data Register."},
	{"ac",      gs_ac,       "[ WORD ] -- Get/set Accumulator."},
	{"sp",      gs_sp,       "[ WORD ] -- Get/set Stack Pointer." NL },

	// Low level processor functionality
	{"ru",      go_ru,       "[ RADDR ] -- Read from processor unit by RADDR"},
	{"wu",      go_wu,       "[ WADDR WORD ] -- Write WORD to processor unit WADDR"},
	{"act",     go_act,      "[ ACTION ] -- Execute processor action"},

#message "TODO: Evaluate and reinstate commands"
	// {"s",       go_state,    "-- Current processor status"},
       	// {"us",      go_ustate,   "-- Microcode control state"},
       	// {"dfps",    go_dfps,     "-- Show DFP state"},
	// {"cons",    go_cons,     "-- Virtual console (<Enter> # . to exit)."},
	{"lock",    gs_lock,     "[ BOOL ] -- Get/set software switch lock." NL },

	// // Left switch bank (computer control)

	// {"reset",   go_reset, "[ BOOL ] -- Reset (if TRUE, cold boot)"},
	// {"start",   go_start, "-- Reset & run"},
	// {"stop",    go_stop,  "-- Stop"},
	// {"halt",    go_stop,  "-- Stop (same as stop, for versatility)"},
	// {"run",     go_run,   "-- Run"},
	// {"step",    go_step,  "[ N ] -- Step to next fetch (default: 1)"},
	// {"ustep",   go_ustep, "[ N ] -- Microstep the CPU (default: 1)"},

	// // Tracing program execution
	// {"trace",   go_trace, "-- Status trace"},
	// {"utrace",  go_utrace, "-- Microcode status trace"},
	// {"bp",      go_bp,     "[ NUM [ off | ADDR ] ] -- Set breakpoint (see docs)"},
	// {"hof",     gs_hof,    "[ BOOL ] -- Get/set halt on FAIL"},
	// {"hos",     gs_hos,    "[ BOOL ] -- Get/set halt on SENTINEL"},

	// // Clock speed

	{"fast",    go_fast,   "-- CPU at full speed"},
	{"slow",    go_slow,   "-- CPU at slow speed"},
	{"creep",   go_creep,  "-- CPU at creep speed"},
	// {"clk",     go_clk,    "PS DIV -- Arbitrary clock speed (see docs).\n201"},

	{"a",       gs_addr,   "[ WORD ] -- Get/set address"},
	// {"r",       go_read,   "-- Read mem[a++]"},
	// {"d",       go_dump_text,   "[ C ] -- Dump C words (default: 80)"},
	// {"dis",     go_disassemble, "[ C ] -- Disassemble C words (default: 10)"},
	// {"db",      go_dump_bin,    "[ C ] -- Binary dump C words (default: 80)"},
	// {"w",       go_write,  "WORD [ WORD... ] -- Write c words to mem[a++]"},
	// {"fill",    go_fill,   "COUNT VALUE -- Fill memory"},
	// {"in",      go_in,     "ADDR -- Read I/O address ADDR"},
	// {"out",     go_out,    "ADDR WORD -- Write WORD to I/O addr ADDR.\n201"},

	// //{"rom",      gs_rom,   "[ BOOL ] -- Get/set top 32kW ROM mapping"},
	// //{"lock",     gs_lock,  "[ BOOL ] -- Get/set front panel lock status"},
	// {"i1",      go_ifr1,  "-- Signal IRQ1"},
	// {"i6",      go_ifr6,  "-- Signal IRQ6"},

	// // Diagnostic I/O
	// {"sr",      say_sr,   "-- Read front panel switches"},
	// //{"leds",    gs_leds, "[ NYBBLE ] -- Get/set diagnostic LEDs (0-F)"},
	{"or",      gs_or,   "[ WORD ] -- Get/set OR lights"},

	{"\0", (void*)-1}
};

#undef NL

#endif // __PROTO_CMDS_H
