GAL16V8         ; this is the GAL type
BUSCTL00        ; this is the signature


; 1     2       3       4       5       6       7       8       9       10
RESET	CLK3	T34	HALT	WAITING	WEN	REN	MEM	IO	GND
WS    	DBEN	ABEN	DBDIR	SETW	CLRRW	SETWS	SETR	CLRWS	VCC
;11     12      13      14      15      16      17      18      19      20



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; READ/WRITE ENABLES
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; _____      ___ ___ _______   ____ ____ _____
; RESET CLK3 REN WEN WAITING   SETR SETW CLRRW   Notes
; -----------------------------------------------------------------------------
;   0    X    X   X     X       1    1     0     Reset in progress
;   1    0    1   1     1       1    1     0     Sanity bus disablement
; -----------------------------------------------------------------------------
;   1    1    X   X     X       1    1     1     T2 or T4: do nothing.
;   1    0    1   1     1       1    1     1     T3: no bus transaction
; -----------------------------------------------------------------------------
;   1    0    0   1     X       0    1     1     T3: read
;   1    1    0   1     0       0    1     1     T3: read, wait state
; -----------------------------------------------------------------------------
;   1    0    1   0     X       1    0     1     T3: write
;   1    1    1   0     0       1    0     1     T3: write, wait state
; -----------------------------------------------------------------------------

; Reading starts when T3 is entered, and we enable a read when REN is
; low during T3 (CLK3 low). If we enter a wait state, reading
; continues, overriding the normal de-assertion of R and W on the
; rising edge of CLK1.

; Update: added sanity: only assert when MEM or IO are also asserted.
; Update: more paranoia: ensure only one of each pair of { REN, WEN }
; and { MEM, IO } is enabled.

/SETR = /MEM * IO * /REN * WEN * /CLK3  +  MEM * /IO * /REN * WEN * /CLK3  +  /MEM * IO * /REN * WEN * /WAITING  +  MEM * /IO * /REN * WEN * /WAITING

/SETW = /MEM * IO * REN * /WEN * /CLK3  +  MEM * /IO * REN * /WEN * /CLK3  +  /MEM * IO * REN * /WEN * /WAITING  +  MEM * /IO * REN * /WEN * /WAITING


; Disable the peripheral bus on reset. Also, for paranoia's sake, disable it
; whenever there's no bus transaction (REN or WEN are both high, or MEM and IO
; are both high) during T3.

; /CLRRW = /RESET  +  /CLK3 * WAITING * WEN * REN  +  /CLK3 * MEM * IO

; Note: the paranoia modification above makes WAITING a don't-care
; value so the equation is simplified.
/CLRRW = /RESET  +  /MEM * /IO  + /REN * /WEN  +  MEM * IO  +  REN * WEN


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; ADDRESS BUS ENABLE (IN FLUX)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; The Address Bus driver is in a state of flux at the moment. For now,
; we drive it when HALT is high.
;
; In the future, we would drive it only during a MEM or IO transaction
; during, e.g. T34.

; Enable the Address Bus only during a memory or I/O bus
; transaction. NOT PROPERLY IMPLEMENTED/TESTED (YET).

;;; /ABEN =    /MEM * /T34 * HALT   +  /IO * /T34 * HALT   +   /WAITING * HALT

; For now, drive all the time when not resetting or halted.
/ABEN =    RESET * HALT


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; DATA BUS ENABLE (IN FLUX)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Truth table:
; ___  __  _______     ____
; MEM  IO  WAITING  |  DBEN
; ------------------|-------
;  0    X     X     |    0
;  X    0     X     |    0
;  X    X     0     |    0
;  1    1     1     |    1
;
; I.e. it's a three-input negative-logic OR gate. (implemented as a
; three-input AND gate in the pre-GAL schematics).

; Note, MEM or IO remain asserted during a wait state, so the /WAITING terms
; are redundant. But added minterm coverage helps avoid glitches.

; For safety's sake, account for just the four defined bus transactions.

;       memory read                        memory write                       I/O read                           I/O write
/DBEN = RESET * /MEM * IO * /REN * WEN  +  RESET * /MEM * IO * REN * /WEN  +  RESET * MEM * /IO * /REN * WEN  +  RESET * MEM * /IO * REN * /WEN  +  RESET * /MEM * IO * /REN * WEN * /WAITING  +  RESET * /MEM * IO * REN * /WEN * /WAITING  +  RESET * MEM * /IO * /REN * WEN * /WAITING  +  RESET * MEM * /IO * REN * /WEN * /WAITING


; Set the bus direction. When low, a data bus read is performed. When high, a
; data bus write is performed. This is here for three reasons:
;
; (a) So it is synchronous with DBEN.
; (b) To add some added protection using /MEM and /IO.
; (c) So it can be changed if nasty glitches happen anyway.

/DBDIR = /REN * WEN * /MEM * IO  +  /REN * WEN * MEM * /IO

; DBDIR used to be R, the bus signal, but it helps to drive the bus early, so
; the data bus has enabled by the time R is asserted.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; WAIT STATES
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Optional configuration on the schematics: allow wait states only during T34.
;;; /SETWS = /WS * /T34

; Currently, set a WS asynchronously, whenever the 
/SETWS = /WS

/CLRWS = /RESET




DESCRIPTION


NOTE: still to be written!


Inputs: (active low unless otherwise stated)

xxxxxx   -- 

Outputs:

xxxxxx   -- 

; End of file.
