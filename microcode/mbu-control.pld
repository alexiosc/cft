GAL16V8         ; this is the GAL type
MBUCTL00        ; this is the signature

; 1     2       3       4       5       6       7       8       9       10
WAR     WMBN    RMBN    RMBP    DIS     WMBP    IDEN    ADDR0   ADDR1   GND
IR0     IR1     IR2     IBUSEN  A0      A1      A2      WE      OE      VCC
;11     12      13      14      15      16      17      18      19      20

; Hint: convert espresso output to equations using:
;
; espresso -ofr mbu-control.espresso | ../tools/espresso2pld

; We provide an explicit safety interlock here, so OE and WE are never asserted
; together. If reads and writes are requested at the same time, neither
; happens.


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Output AEXT to IBUS
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; IBus Output enable, in negative logic because it has fewer minterms.

; ___  ____  ____  ___  _____  ____   ____     ____  __  __
; DIS  RMBP  RMBn  WAR  IDXEN  WMBP   WMBn  |  IBEN  OE  WE  What
; ------------------------------------------|-------------------------------------------
;  0     1    -     -     -     -      -    |   1     1   1  MBU disabled
;  0     -    1     -     -     -      -    |   1     1   1  MBU disabled
;  0     0    -     -     -     -      -    |   0     1   1  MBU disabled, read hard map
;  0     -    0     -     -     -      -    |   0     1   1  MBU disabled, read hard map
;  0     -    -     0     -     -      -    |   1     1   1  MBU disabled, ignore writes
;  0     -    -     -     -     0      -    |   1     1   1  MBU disabled, ignore writes
;  0     -    -     -     -     -      0    |   1     1   1  MBU disabled, ignore writes
; ------------------------------------------|-------------------------------------------
;  1     1    1     1     -     1      1    |   1     0   1  MBU idle, output MB0
; ------------------------------------------|-------------------------------------------
;  1     0    -     -     -     -      -    |   0     0   1  Read MBP
; ------------------------------------------|-------------------------------------------
;  1     1    0     1     -     1      1    |   0     0   1  Read MBP index register
; ------------------------------------------|-------------------------------------------
;  1     1    1     0     1     1      1    |   1     0   1  write_ar_XX
; ------------------------------------------|-------------------------------------------
;  1     1    1     0     0     1      1    |   1     0   1  write_ar_mbz, MB0 idx reg
; ------------------------------------------|-------------------------------------------
;  1     1    1     1     -     0      1    |   1     1   0  Write BMP
; ------------------------------------------|-------------------------------------------
;  1     1    1     1     -     1      0    |   1     1   0  Write MBx index register


; Enable the IBUS when /RMBN or /RMBP is asserted, even when the MBU
; is disabled. Other signals are included as a safety interlock.

IBUSEN = /WAR  +  /WMBN  +  /WMBP  +  /RMBP * /RMBN  +  RMBP * RMBN * WMBP * WMBN
	  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Register File I/O control
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; ___  ____  ____  ___  _____  ____   ____     __  __
; DIS  RMBP  RMBn  WAR  IDXEN  WMBP   WMBn  |  OE  WE  What
; ------------------------------------------|-------------------------------------
;  0     -    -     -     -     -      -    |   1   1  MBU disabled
; ------------------------------------------|-------------------------------------
;  1     1    1     1     -     1      1    |   0   1  MBU idle, output MB0
; ------------------------------------------|-------------------------------------
;  1     0    -     -     -     -      -    |   0   1  Read MBP
; ------------------------------------------|-------------------------------------
;  1     1    0     1     -     1      1    |   0   1  Read MBX index register
; ------------------------------------------|-------------------------------------
;  1     1    1     0     1     1      1    |   0   1  write_ar_mbX
;  1     1    1     0     0     1      1    |   0   1  write_ar_mbz, MBX idx reg
; ------------------------------------------|-------------------------------------
;  1     1    1     1     -     0      1    |   1   0  Write BMP
; ------------------------------------------|-------------------------------------
;  1     1    1     1     -     1      0    |   1   0  Write MBX index register
; ------------------------------------------|-------------------------------------
;  1     0    0     -     -     -      -    |   0   1  Safety (RBMP + RMBn asserted)
;  1     0    -     0     -     -      -    |   0   1  Safety (RBMP + WAR  asserted)
;  1     -    0     0     -     -      -    |   0   1  Safety (RBMn + WAR  asserted)
; ------------------------------------------|-------------------------------------
;  1     0    -     -     -     0      -    |   0   1  Safety (RBMP + WBMP asserted)
;  1     0    -     -     -     -      0    |   0   1  Safety (RBMP + WBMn asserted)
; ------------------------------------------|-------------------------------------
;  1     -    0     -     -     0      -    |   0   1  Safety (RBMn + WBMP asserted)
;  1     -    0     -     -     -      0    |   0   1  Safety (RBMP + WBMn asserted)
; ------------------------------------------|-------------------------------------
;  1     -    -     0     -     0      -    |   0   1  Safety (RBMP + WBMP asserted)
;  1     -    -     0     -     -      0    |   0   1  Safety (WAR + WBMn asserted)
; ------------------------------------------|-------------------------------------
;  1     -    -     -     -     0      0    |   0   1  Safety (WMBP + WMBn asserted)

; Memory Output Enable. Define in positive logic because it's easier.

; Output is DISABLED when:
;
; 1. The MBU is disabled.
; 2. The MBU is enabled and WMBP is the only asserted signal.
; 2. The MBU is enabled and WMBn is the only asserted signal.
;
; Note: Espresso comes up with the exact same expression in positive logic.

OE = /DIS  +  RMBP * RMBN * WAR * /WMBP * WMBN  +  RMBP * RMBN * WAR * WMBP * /WMBN

; Memory Write Enable. This one is easier to do in negative logic because there's only two minterms:
;
; 1. The MBU is enabled and write_mbp is the only asserted control signal.
; 2. The MBU is enabled and write_mbn is the only asserted control signal.
;
; Note: Again, Espresso comes up with the exact same expression.

WE = /DIS  +  /WAR  +  /RMBN  +  /RMBP  +  /WMBP * /WMBN  +  RMBP * RMBN * WMBP * WMBN


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Address Multiplexer
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; The exact MBr is selected from either RADDR or IR. The selection criteria are:
;
; 1. Use RADDR[0..1] (bit 2 is always 0) when WRITE_AR_xx is asserted, and IDXEN is not.
; 2. Use IR when either:
;    a. WRITE_AR_xx and IDXEN are both asserted (use an page 0 index register)
;    b. READ_MBn is asserted
;    c. WRITE_MBn is asserted

A0 = DIS * RMBP * /RMBN * WAR * WMBP * WMBN * IR0  +  DIS * RMBP * RMBN * WAR * WMBP * /WMBN * IR0  +  DIS * RMBP * RMBN * /WAR * /IDEN * WMBP * WMBN * IR0  +  DIS * RMBP * RMBN * /WAR * IDEN * WMBP * WMBN * ADDR0
A1 = DIS * RMBP * /RMBN * WAR * WMBP * WMBN * IR1  +  DIS * RMBP * RMBN * WAR * WMBP * /WMBN * IR1  +  DIS * RMBP * RMBN * /WAR * /IDEN * WMBP * WMBN * IR1  +  DIS * RMBP * RMBN * /WAR * IDEN * WMBP * WMBN * ADDR1
A2 = DIS * RMBP * /RMBN * WAR * WMBP * WMBN * IR2  +  DIS * RMBP * RMBN * WAR * WMBP * /WMBN * IR2  +  DIS * RMBP * RMBN * /WAR * /IDEN * WMBP * WMBN * IR2




DESCRIPTION

MBU GAL EQUATIONS

Inputs: (active low unless otherwise stated)

DIS      -- Disable MBU register file.
RMBP     -- Read the MBP (MB0, address 000) register
WAR      -- Read from MBU
IDXEN    -- if WAR asserted, IR[1:0] selects register, not RADDR[2:0]
WMBP     -- Write to MBP (MB0, address 000) register
WMBn     -- Write to any MBn register, IR[2:0] selects.
ADDR0-1  -- RADDR[1:0]
IR0-2    -- IR[2:0]

Outputs:

A0-2     -- Address of MBx register in register file RAM.
OE       -- Active low output enable signal to the register file RAM.
WE       -- Active low write enable signal to the register file RAM.

Truth table:

___  ____  ____  ___  _____  ____   ____                           ____  __  __
DIS  RMBP  RMBn  WAR  IDXEN  WMBP   WMBn  ADDR0-1  IR0-2  |  A0-2  IBEN  OE  WE  What
----------------------------------------------------------|-------------------------------------------------
 0     -    -     -     -     -      -     --       ---   |   000   1     1   1  MBU disabled
 1     1    1     1     -     1      1     --       ---   |   000   1     0   1  MBU idle, output MB0
----------------------------------------------------------|-------------------------------------------------
 1     0    -     -     -     -      -     --       ---   |   000   0     0   1  Read MBP
----------------------------------------------------------|-------------------------------------------------
 1     1    0     1     -     1      1     --       000   |   000   0     0   1  Read MBP index register
 1     1    0     1     -     1      1     --       001   |   001   0     0   1  Read MBD index register
 1     1    0     1     -     1      1     --       010   |   010   0     0   1  Read MBS index register
 1     1    0     1     -     1      1     --       011   |   011   0     0   1  Read MBZ index register
 1     1    0     1     -     1      1     --       100   |   100   0     0   1  Read MB4 index register
 1     1    0     1     -     1      1     --       101   |   101   0     0   1  Read MB5 index register
 1     1    0     1     -     1      1     --       110   |   110   0     0   1  Read MB6 index register
 1     1    0     1     -     1      1     --       111   |   111   0     0   1  Read MB7 index register
----------------------------------------------------------|-------------------------------------------------
 1     1    1     0     1     1      1     00       ---   |   000   1     0   1  write_ar_mbp
 1     1    1     0     1     1      1     01       ---   |   001   1     0   1  write_ar_mbd
 1     1    1     0     1     1      1     10       ---   |   010   1     0   1  write_ar_mbs
 1     1    1     0     1     1      1     11       ---   |   011   1     0   1  write_ar_mbz
----------------------------------------------------------|-------------------------------------------------
 1     1    1     0     0     1      1     --       000   |   000   1     0   1  write_ar_mbz, MB0 idx reg
 1     1    1     0     0     1      1     --       001   |   001   1     0   1  write_ar_mbz, MB1 idx reg
 1     1    1     0     0     1      1     --       010   |   010   1     0   1  write_ar_mbz, MB2 idx reg
 1     1    1     0     0     1      1     --       011   |   011   1     0   1  write_ar_mbz, MB3 idx reg
 1     1    1     0     0     1      1     --       100   |   100   1     0   1  write_ar_mbz, MB4 idx reg
 1     1    1     0     0     1      1     --       101   |   101   1     0   1  write_ar_mbz, MB5 idx reg
 1     1    1     0     0     1      1     --       110   |   110   1     0   1  write_ar_mbz, MB6 idx reg
 1     1    1     0     0     1      1     --       111   |   111   1     0   1  write_ar_mbz, MB7 idx reg
----------------------------------------------------------|-------------------------------------------------
 1     1    1     1     -     0      1     --       ---   |   000   1     1   0  Write BMP
----------------------------------------------------------|-------------------------------------------------
 1     1    1     1     -     1      0     --       000   |   000   1     1   0  Write MBP index register
 1     1    1     1     -     1      0     --       001   |   001   1     1   0  Write MBD index register
 1     1    1     1     -     1      0     --       010   |   010   1     1   0  Write MBS index register
 1     1    1     1     -     1      0     --       011   |   011   1     1   0  Write MBZ index register
 1     1    1     1     -     1      0     --       100   |   100   1     1   0  Write MB4 index register
 1     1    1     1     -     1      0     --       101   |   101   1     1   0  Write MB5 index register
 1     1    1     1     -     1      0     --       110   |   110   1     1   0  Write MB6 index register
 1     1    1     1     -     1      0     --       111   |   111   1     1   0  Write MB7 index register
----------------------------------------------------------|-------------------------------------------------
 1     0    0     -     -     -      -     --       ---   |   000   1     0   1  Safety (RBMP + RMBn asserted)
 1     0    -     0     -     -      -     --       ---   |   000   1     0   1  Safety (RBMP + WAR  asserted)
 1     -    0     0     -     -      -     --       ---   |   000   1     0   1  Safety (RBMn + WAR  asserted)
----------------------------------------------------------|-------------------------------------------------
 1     0    -     -     -     0      -     --       ---   |   000   1     0   1  Safety (RBMP + WBMP asserted)
 1     0    -     -     -     -      0     --       ---   |   000   1     0   1  Safety (RBMP + WBMn asserted)
----------------------------------------------------------|-------------------------------------------------
 1     -    0     -     -     0      -     --       ---   |   000   1     0   1  Safety (RBMn + WBMP asserted)
 1     -    0     -     -     -      0     --       ---   |   000   1     0   1  Safety (RBMP + WBMn asserted)
----------------------------------------------------------|-------------------------------------------------
 1     -    -     0     -     0      -     --       ---   |   000   1     0   1  Safety (RBMP + WBMP asserted)
 1     -    -     0     -     -      0     --       ---   |   000   1     0   1  Safety (WAR + WBMn asserted)
----------------------------------------------------------|-------------------------------------------------
 1     -    -     -     -     0      0     --       ---   |   000   1     0   1  Safety (WMBP + WMBn asserted)

; End of file.
