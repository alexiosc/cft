#!/usr/bin/python
import sys

## {{{ http://code.activestate.com/recipes/576592/ (r3)

def isOdd(integer):
    #assert isinstance(integer, int)
    return integer % 2 == 1

def isEven(integer):
    #assert isinstance(integer, int)
    return integer % 2 == 0

def _list_to_string(li):
    return ''.join(map(str, li))

class GrayCode(object):
    def __init__(self, nbits):
        self._nbits = nbits
        self._grayCode = []
        self.__generate()

    def __getitem__(self, i):
        return self._grayCode[i]

    def __str__(self):
        return str(self._grayCode)

    __repr__ = __str__

    def __iter__(self):            
        return self._grayCode.__iter__()

    def __generate(self):
        li = [0 for i in xrange(self._nbits)]
        self._grayCode.append(_list_to_string(li))

        for term in xrange(2, (1<<self._nbits)+1):
            if isOdd(term):                
                for i in xrange(-1,-(self._nbits),-1):
                    if li[i]==1:                        
                        li[i-1]=li[i-1]^1                        
                        break
                    
            if isEven(term):
                li[-1]=li[-1]^1

            self._grayCode.append(_list_to_string(li))

class GrayCodeIterator(object):
    def __init__(self, nbits):
        self._nbits = nbits

    def __iter__(self):
        li = [0 for i in xrange(self._nbits)]
        yield _list_to_string(li)

        for term in xrange(2, (1<<self._nbits)+1):
            if isOdd(term):                
                for i in xrange(-1,-(self._nbits),-1):
                    if li[i]==1:                        
                        li[i-1]=li[i-1]^1                        
                        break
                    
            if isEven(term):
                li[-1]=li[-1]^1

            yield _list_to_string(li)


if __name__=='__main__':
    # Order:
    # m n z l N Z L RESULT
    YES = 1
    NO = 0
    # Header
    sys.stdout.write('mznl  ')
    for d in xrange(8):
        sys.stdout.write('NZL    ')
    sys.stdout.write('\n      ')
    for d in GrayCodeIterator(3):
        N, Z, L = map(int, d)
        sys.stdout.write('%d%d%d    ' % (N,Z,L))
    sys.stdout.write('\n')

    for c in GrayCodeIterator(4):
        m, n, z, l = map(int, c)
        sys.stdout.write('%d%d%d%d ' % (m,n,z,l))
        for d in GrayCodeIterator(3):
            N, Z, L = map(int, d)
            branch = NO

            eq = ((n and N) or (z and Z) or (l and L))
            eq = eq ^ m

            if (m,n,z,l) == (1,0,0,0):
                branch = YES
            elif m == 0:
                # Or mode.
                branch = 0
                if n and (N == 1): branch = branch | 1
                if z and (Z == 1): branch = branch | 1
                if l and (L == 1): branch = branch | 1
            elif m == 1:
                # And mode.
                branch = 1
                if n and (N == 1): branch = 0
                if z and (Z == 1): branch = 0
                if l and (L == 1): branch = 0
    
            cor = {0:'X', 1:' '}[int(int(eq) == int(branch))]
            br = {0:' ', 1:'1'}[int(branch)]
            eq = {0:' ', 1:'.'}[int(eq)]

            sys.stdout.write('  %s%s%s  ' % (br, eq, cor))
            #print "%d%d%d%d %d%d%d %s" % (m,n,z,l, N,Z,L, branch)
        sys.stdout.write('\n')
        

## end of http://code.activestate.com/recipes/576592/ }}}
