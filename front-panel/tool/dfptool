#!/usr/bin/python3.2
# -*- python -*-
# 
# dfptool - Control the CFT's DFP device over USB serial
# 
# Copyright (C) 2011 Alexios Chouchoulas
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  


import sys
import os
import re
import optparse
import array
import time
import codecs
import dfp


def fail(msg):
    """Output a message and exit."""
    sys.stderr.write(msg + '\n')
    sys.exit(1)


def bare_hex(n):
    """Return a hex representation of a number without the C-like '0x'
    prefix."""
    return hex(n)[2:]


class DFP(dfp.Communication):
    """
    A class to talk to the CFT's DFP board over USB serial.
    """

    # DFP result codes
    RES_READY = 200
    RES_PARAMETER_INFO = 201
    RES_HELLO = 202

    RES_WORKING = 300
    RES_DONE = 301
    RES_CHECKSUM = 302
    
    RES_BAD_COMMAND = 400
    RES_BAD_ADDRESS = 401


    # Params we keep track of
    STR_PARAMS = ['have_processor', 'echo', 'version', 'async', 'lock', 'hof', 'hos']
    HEX_PARAMS = ['bufsize', 'address', 'output_register', 'switch_register',
                  'left_switches', 'right_switches', 'dip_switches']
    PARAMS = STR_PARAMS + HEX_PARAMS

    
    def __init__(self, port, rate, timeout=5, slow=False, debug=False, debug_io=False):
        dfp.Communication.__init__(self, port, rate,
                                   timeout=timeout,
                                   slow=slow,
                                   debug_io=debug_io)

        self.debug = debug

        self.have_processor = None

        self.feature_text = False
        
        for prop in self.STR_PARAMS + self.HEX_PARAMS:
            setattr(self, prop, None)

        self.status = None
        self.result = None

        
        # Initialise the device.
        self.initiate()
        self.ping()
        #self.get_features()
        self.get_full_status()
        #self.output_bin()

        # x = 0
        # while True:
        #     self.cmd('or', hex(x)[2:])
        #     time.sleep(0.1);
        #     x = (x + 1) & 0xffff

        # pat = [0x1111, 0x2222, 0x4444, 0x8888]
        # while True:
        #     for x in pat:
        #         self.cmd('or', hex(x)[2:] )
        #         time.sleep(0.1);


    def scavenge_state(self, response):
        """Scan responses for interesting info and update our status."""
        try:
            code = int(response['result'])
        except TypeError:
            return

        try:
            # Try the code as is first
            name = '_parse%03d' % code
            if hasattr(self, name):
                return getattr(self, name)(response)
    
            # Informational codes (2xx) have equivalent Status change (3xx)
            # messages.
            if code in range(200, 300):
                name = '_parse%03d' % (code + 100)
                if hasattr(self, name):
                    return getattr(self, name)(response)
    
            # And vice versa
            if code in range(300, 400):
                name = '_parse%03d' % (code - 100)
                if hasattr(self, name):
                    return getattr(self, name)(response)

        except (KeyError, AttributeError, IndexError):
            if response.get('val'):
                raise ProtocolError("Invalid value for code %s: '%s'." %
                                    (code, response['val']))
            else:
                raise ProtocolError("Missing value for code %s." %
                                    (code,))
            



    def _parseHex(self, r, default=0):
        """Parse a hexadecimal report from the DFP."""
        try:
            return int(r.get('val', default), 16)
        except AttributeError:
            return int(r, 16)

            
    def _parseBin(self, r, default=0):
        """Parse a binary report from the DFP."""
        try:
            return int(r.get('val', default), 2)
        except AttributeError:
            return int(r, 2)

            
    def _parseBool(self, r, default='off'):
        """Parse an on/off report from the DFP."""
        return r.get('val', default).lower in \
            ('on', 'true', 'enabled', 'found', 'present')

            
    def _parse201(self, r):
        """Parse version."""
        self.version = r.get('val', None)


    def _parse203(self, r):
        """Parse address."""
        self.address = self._parseHex(r)


    def _parse204(self, r):
        """Parse bufsize."""
        self.bufsize = self._parseHex(r)


    def _parse205(self, r):
        """Processor detected."""
        self.have_processor = True


    def _parse206(self, r):
        """Processor not found."""
        self.have_processor = False
        

    def _parse210(self, r):
        """Echo."""
        self.echo = self._parseBool(r)
        

    def _parse212(self, r):
        """Terminal mode."""
        self.terminal = self._parseBool(r)
        

    def _parse213(self, r):
        """Parse halt-on-fail (off|on)."""
        self.hof = self._parseBool(r)
        

    def _parse214(self, r):
        """Parse halt-on-sentinel (off|on)."""
        self.hos = self._parseBool(r)
        

    def _parse215(self, r):
        """Front panel lock."""
        self.lock = self._parseBool(r)
        

    def _parse211(self, r):
        """Async messages."""
        self.async = self._parseBool(r)
        

    def _parse211(self, r):
        """Async messages."""
        self.async = self._parseBool(r)
        

    def _parse220(self, r):
        """Parse Switch Register."""
        self.switch_register = self._parseHex(r['val'].split()[0])


    def _parse221(self, r):
        """Parse Output Register."""
        self.output_register = self._parseHex(r)


    def _parse251(self, r):
        """Parse switch status."""
        data = r.get('val').split()
        if len(data) != 5:
            raise dfp.ProtocolError('251 Switch state: expected 5 fields, got %d' % \
                                        len(data))
        self.left_switches = self._parseBin(data[0])
        self.switch_register = self._parseBin(data[1])
        self.right_switches = self._parseBin(data[2])
        self.dip_switches = self._parseBin(data[3]) << 8 | self._parseBin(data[4])
        print(data)


    def print_state(self):
        """Print out the current state of the DFP."""
        for param in [] + self.PARAMS:
            print("%-20s %s" % (param + ':', getattr(self, param)))


    ###############################################################################


    def get_features(self):
        """Detect available optional features.
        """
        if not self.version:
            self.cmd(self.CMD_INFO_VERSION)
        self.feature_text = "+t" in self.version
        
            

    def get_full_status(self):
        """Query the FlashProg for its full status.
        """
        self.cmd('dfps', until=251, retry=3)
        self.cmd('lock', until=215, retry=3)
        # self.cmd(self.CMD_INFO_BUFSIZE)
        # self.cmd(self.CMD_INFO_START)
        # self.cmd(self.CMD_INFO_COUNT)
        # if self.feature_text:
        #     self.cmd(self.CMD_SET_OUT_BIN)

        
    def cmd2(self, cmd, arg1, arg2, until=RES_READY):
        """Issue a command, and read its output until a particular
        output code is seen. Yield output data one by one.
        """
        self.send(cmd + ' ' + str(arg1) + ' ' + str(arg2))
        return self.read_response(until=until)


    def grok_result(self, line):
        """Parse a FlashProg result code and return a dict of information.

        If parameter information for a field in self.PARAMS is seen, update the
        corresponding attribute (which has to exist in the object."""
        def _parse_result(x):
            try:
                x = re.findall('(\d+)\s+(.+?):\s+(.+)', x)[0]
                return dict(result=int(x[0]), key=x[1].lower(), val=x[2])
            except IndexError:
                try:
                    x = re.findall('(\d+)\s+(.+)', x)[0]
                    return dict(result=int(x[0]), status=x[1])
                except IndexError:
                    return x

        datum = _parse_result(line)

        try:
            self.result = datum.get('result', self.result)
            self.status = datum.get('status', self.status)

        except AttributeError:
            return datum

        # if 'key' in datum \
        #         and 'val' in datum \
        #         and datum['key'] in self.PARAMS \
        #         and hasattr(self, datum['key']):
        #     if datum['key'] in self.HEX_PARAMS:
        #         try:
        #             setattr(self, datum['key'], int(datum['val'], 16))
        #         except ValueError:
        #             raise dfp.NumberFormatError("Value for %s should be a hex integer, saw '%s' instead." % \
        #                                             (datum['key'], datum['val']))
        #     else:
        #         setattr(self, datum['key'], datum['val'])
        return datum


    def output_bin(self):
        """Set output mode to binary."""
        if self.feature_text:
            self.cmd(self.CMD_SET_OUT_BIN)
    

    def output_text(self):
        """Set output mode to a human-redable text dump."""
        if self.feature_text:
            self.cmd(self.CMD_SET_OUT_TEXT)
    

    def set_start(self, addr):
        """Set starting address for chip I/O."""
        self.cmd(self.CMD_SET_START, bare_hex(addr))


    def set_count(self, count):
        """Set byte count for chip I/O."""
        self.cmd(self.CMD_SET_COUNT, bare_hex(count))


    def dump(self, start=None, count=None, check=True):
        """Dump data from the ROM. If the start address and/or byte count are
        omitted, the last used values (perhaps the FlashProg hardware
        defaults) will be used instead."""
        if start is not None:
            self.set_start(start)
        if count is not None:
            self.set_count(count)
        self.cmd(self.CMD_DUMP, until=self.RES_WORKING)

        data = self.ser.read(int(self.count))
        x = self.read_response()

        if check:
            if sum(ord(x) for x in data) != self.checksum:
                raise ChecksumError()
            
        return data


    def dumptext(self, start=None, count=None):
        """Dump data from the ROM in text mode. This is mostly used
        for testing. No checksums will be checked."""
        if not feature_text:
            raise UnsupportedFeature("This flash programmer cannot make text dumps")
        if start is not None:
            self.set_start(start)
        if count is not None:
            self.set_count(count)
        self.output_text()
        data = self.dump(start=start, count=count, check=False)
        self.output_bin()
        return data


    def write_byte(self, addr, data):
        """Write the supplied data to the supplied addr.
        """
        self.cmd2(self.CMD_WRITE_BYTE, bare_hex(addr), bare_hex(data))


if __name__ == '__main__':
    p = optparse.OptionParser()
    p.add_option('-i', '--info', action='store_true',
                 help='Initialise the Flash Programmer and get as much information as possible from it.')
    # p.add_option('-r', '--read', action='store_true',
    #              help='Read a ROM image. Specify --start and --length.')
    # p.add_option('-w', '--write', action='store_true',
    #              help='Write a ROM image. Specify --start and --length.')
    # p.add_option('-v', '--verify', action='store_true',
    #              help='Verify a ROM image. Specify --start and --length.')
    #p.add_option('-t', '--text', action='store_true',
    #             help='Dump in ASCII mode.')
    # p.add_option('', '--chip-erase', action='store_true',
    #              help='Erase a Flash RAM chip using the JEDEC chip erase code.')
    p.add_option('-f', '--force', action='store_true',
                 help='Confirm that you wish to erase the Flash RAM chip.')
    # p.add_option('-s', '--start', action='store', type='int', metavar='BYTE-OFFSET',
    #              default=0,
    #              help='Specify starting address (default: 0).')
    # p.add_option('-l', '--length', action='store', type='int', metavar='BYTES',
    #              help='Specify length of read or write.')
    p.add_option('-p', '--port', action='store', metavar='DEVICE',
                 help='The device the DFP is attached to (e.g. /dev/ttyUSB0).')
    p.add_option('-b', '--bps', action='store', type='int', metavar='BPS-RATE',
                 default=460800,
                 help='The bps rate to use to talk to the Flash Programmer (default: 460800).')
    # p.add_option('-B', '--block', action='store', type='int', metavar='BYTES',
    #              default=8192,
    #              help='How many bytes to read from the chip at a time. (default: 8912)')
    p.add_option('', '--debug-io', action='store_true',
                 help='Print out the entire dialogue between the computer and programmer. Excessive output.')
    p.add_option('', '--debug', action='store_true',
                 help='Print out debugging information.')
    p.add_option('-T', '--timeout', type='int', action='store', default=2, metavar='SECONDS',
                 help='Set the communications timeout. (default: %default)')
    p.add_option('', '--slow', action='store_true',
                 help='Slow down communication. Useful for an emulated DFP.')
    
    (options, args) = p.parse_args()
    options.text = False
    options.jedec = True
    
    # if options.read and options.verify:
    #     fail("Read and verify cannot be performed at the same time.")
    # if options.verify and not args:
    #     fail("You must specify a file to verify.")
    # if options.length and options.length % FlashProg.FP_BLOCK_SIZE:
    #     fail("Length must be a multiple of %s." % FlashProg.FP_BLOCK_SIZE)
    # if options.block & 0xf:
    #     fail("Block size must be a multiple of 16.")

    if not options.port:
        fail("Please specify a device for the DFP (on Linux, something like /dev/ttyUSB*).")
    port = options.port

    try:
        # Initialise
        fp = DFP(port, options.bps, timeout=options.timeout,
                 slow=options.slow,
                 debug=options.debug, debug_io=options.debug_io)
    
        # Print out information
        if options.info:
            fp.print_state()
            sys.exit(0)
    
    except KeyboardInterrupt:
        sys.stderr.write('*** User interrupt, aborting\n')
        sys.exit(1)

    except RuntimeError as e:
        sys.stderr.write("%s: %s\n" % (sys.argv[0], str(e)))
        sys.exit(2)
    
# End of file.

