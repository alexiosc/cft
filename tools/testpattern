#!/usr/bin/python

import os
import sys
import optparse

basedir = os.path.dirname(os.path.abspath(sys.argv[0]))

#MANDEL1 = ''.join(chr(33+x) for x in MANDEL1)
#print MANDEL1.encode('zip').encode('base64')

MANDEL1_160x100="""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
//8A+jVvPQ=="""


MIF_MAX = 4096
MIF_MAX_CG = 256 * 16

MIF_HEADER = """-- Altera Memory Initialisation Format (MIF)
-- Generated automatically, do not edit!

DEPTH = %(s)d; -- Number of entries in this ROM
WIDTH = %(w)d; -- Number of data bits per word.
ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;
CONTENT
BEGIN
"""

MIF_FOOTER = """END;

-- End of file.
"""


class Patterns(object):

    SRAM_SIZE = 32768
    PLANE_SIZE = 65536

    BPLANE_FNAME = 'vdu-bp%d.%s'
    CPLANE_FNAME = 'vdu-cp%d%s.%s'
    CGROM_FNAME = 'vdu-cg0.%s'

    def __init__(self):
        self.patterns = [x.replace('pat_', '')
                         for x in dir(self)
                         if x.startswith('pat_')]


    def parseOpts(self):
        """Parse command-line options."""
        p = optparse.OptionParser()
        p.add_option('-l', '--list', action='store_true',
                     help='Lists available test patterns.'),
        p.add_option('-b', '--bitmap', metavar='TEST-PATTERN',
                     choices=self.patterns,
                     help='Run TEST-PATTERN and create B plane image files (vdu-bpN.list) for ' +
                     'Verilog use (default: no change).')
        p.add_option('-c', '--colour', metavar='TEST-PATTERN',
                     choices=self.patterns,
                     help='Run TEST-PATTERN and create C plane image files (vdu-cpN{hi,lo}.list) for ' +
                     'Verilog use (default: no change).')
        p.add_option('-f', '--font', metavar='TEST-PATTERN',
                     choices=self.patterns,
                     help='Run TEST-PATTERN and create a Character Generator (font) ' +
                     'image file (vdu-cg0.list) for ' +
                     'Verilog use (default: no change).')
        # p.add_option('-d', '--revd',
        #              help='Use rev D layout (three 128K RAMs).')
        
        return p.parse_args()


    def run(self):
        self.opts, self.args = self.parseOpts()
        if self.opts.list:
            print "Available test patterns:"
            print
            for x in sorted(self.patterns):
                print '  %s: %s' % (x, getattr(self, 'pat_' + x).__doc__)
            print
            sys.exit(0)

        if self.opts.bitmap:
            self.doBitmap(self.opts.bitmap)
        if self.opts.colour:
            self.doColour(self.opts.colour)
        if self.opts.font:
            self.doFont(self.opts.font)
            
        if not (self.opts.font or self.opts.colour or self.opts.bitmap):
            print 'Nothing to do! Say %s --help for help.' % sys.argv[0]
            sys.exit(1)


    def doBitmap(self, fx):
        print "Writing B plane files."
        pattern = getattr(self, 'pat_' + fx)

        fl = list()
        for i in range(2):
            f = open(self.BPLANE_FNAME % (i, 'list'), 'w')
            f.write('// VDU B Plane SRAM image %d\n' % i)
            f.write('// Generated automatically by: %s\n' % (' '.join(sys.argv)))
            fl.append(f)

        mif = open(self.BPLANE_FNAME % (i, 'mif'), 'w')
        mif.write(MIF_HEADER % dict(s=MIF_MAX, w=8))

        for i,x in enumerate(pattern()):
            f = fl[i >> 15]
            f.write(bin(x)[2:].zfill(8))
            if (i % 128) == 0:
                f.write('\t// line %s' % (i >> 7))
            f.write('\n')
            if i < MIF_MAX:
                mif.write('%04x: %04x;\n' % (i, x))

        mif.write(MIF_FOOTER)

        

    def doColour(self, fx):
        print "Writing C plane files."
        pattern = getattr(self, 'pat_' + fx)
        fl = list()
        for i in range(2):
            f = open(self.CPLANE_FNAME % (i, 'lo', 'list'), 'w')
            f.write('// VDU C Plane SRAM image %d, LSB\n' % i)
            f.write('// Generated automatically by: %s\n' % (' '.join(sys.argv)))
            fl.append(f)

            f = open(self.CPLANE_FNAME % (i, 'hi', 'list'), 'w')
            f.write('// VDU C Plane SRAM image %d, MSB\n' % i)
            f.write('// Generated automatically by: %s\n' % (' '.join(sys.argv)))
            fl.append(f)

        mif = open(self.CPLANE_FNAME % (i, '', 'mif'), 'w')
        mif.write(MIF_HEADER % dict(s=MIF_MAX, w=16))

        for i,x in enumerate(pattern()):
            f0 = fl[(i >> 14) & 2]
            f1 = fl[((i >> 14) & 2) | 1]

            #print i, i>>14, 1|i>>14

            f0.write(bin(x & 0xff)[2:].zfill(8))
            if (i % 128) == 0:
                f0.write('\t// line %s' % (i >> 7))
            f0.write('\n')
                
            f1.write(bin((x >> 8) & 0xff)[2:].zfill(8))
            if (i % 128) == 0:
                f1.write('\t// line %s' % (i >> 7))
            f1.write('\n')

            if i < MIF_MAX:
                mif.write('%04x: %04x;\n' % (i, x))

        mif.write(MIF_FOOTER)


    def doFont(self, fx):
        print "Writing Character Generator files."
        pattern = getattr(self, 'pat_' + fx)
        f = open(self.CGROM_FNAME % 'list', 'w')
        f.write('// Character Generator SRAM image\n')
        f.write('// Generated automatically by: %s\n' % (' '.join(sys.argv)))

        mif = open(self.CGROM_FNAME % 'mif', 'w')
        mif.write(MIF_HEADER % dict(s=MIF_MAX_CG, w=8))

        for i,x in enumerate(pattern()):
            if (i % 16) == 0:
                f.write('\n')
            f.write(bin(x)[2:].zfill(8))
            if (i % 16) == 0:
                f.write('\t// codepoint %d' % (i >> 4))
            f.write('\n')
            if i < MIF_MAX_CG:
                mif.write('%04x: %04x;\n' % (i, x))

        mif.write(MIF_FOOTER)


    def pat_ascii(self):
        """values 33 to 126 repeating"""
        for c in range(self.PLANE_SIZE):
            yield 33 + ((c % 127) % 94)
    
    def pat_decimal(self):
        """values 48 to 57 repeating at start of each line"""
        for c in range(self.PLANE_SIZE):
            yield 48 + ((c & 0x7f) % 10)
    
    def pat_bgrid5(self):
        """C plane 5x5 grid for edge alignment"""
        for c in range(self.PLANE_SIZE):
            if (((c % 128) % 5) == 0) or (((c >> 7) % 5) == 0):
                yield 13        # Solid block in the current version of the charset
            else:
                if ((c % 128) in (39,79)) or ((c >> 7) in (24, 49, 99, 199, 399)):
                    yield 14
                else:
                    yield 32
    
    def pat_cheques(self):
        """B plane cheque characters (14)"""
        for c in range(self.PLANE_SIZE):
            yield 14
    
    def pat_sgr(self):
        """Semi-graphics B plane characters (15)"""
        for c in range(self.PLANE_SIZE):
            yield 15
    
    def pat_white(self):
        """fills with value 0x3f (white)"""
        for c in range(self.PLANE_SIZE):
            yield 0x3f
    
    def pat_whitebg(self):
        """fills with white background, black foreground"""
        for c in range(self.PLANE_SIZE):
            yield 0x3f00
    
    def pat_black(self):
        """fills with value 0x00 (black)"""
        for c in range(self.PLANE_SIZE):
            yield 0x00

    def pat_fg64(self):
        """fills with black background and foreground values 0-63, repeating"""
        for c in range(self.PLANE_SIZE):
            yield (c + 1) % 64

    def pat_fg7(self):
        """fills with black background and alternating 7 brightest foreground colours, repeating"""
        col = [0b000011, 0b001100, 0b001111, 0b110000, 0b110011, 0b111100, 0b111111]
        for c in range(self.PLANE_SIZE):
            yield col[(c & 0x7f) % 7]

    def pat_bg64(self):
        """fills with white foreground and background values 0-63, repeating"""
        for c in range(self.PLANE_SIZE):
            yield 0x3f | (((c + 1) % 64) << 8)

    def pat_bg64stripe(self):
        """fills with white foreground and diagonally striping background values 0-63, starting with 1, repeating."""
        for c in range(self.PLANE_SIZE):
            yield 0x3f | (((1 + c + (c >> 7)) % 64) << 8)

    def pat_fg64stripe(self):
        """fills with black background and diagonally striping foreground values 0-63, starting with 1, repeating."""
        for c in range(self.PLANE_SIZE):
            yield (1 + c + (c >> 7)) % 64

    def pat_attrtest(self):
        """fills with black background and white foreground, cycling through blink/invert attributes."""
        for c in range(self.PLANE_SIZE):
            yield 0x3f | ((((c & 0x7f) // 10) & 3) << 14)

    def pat_a(self):
        """a single 'A' character at position 0, spaces everywhere else."""
        yield 65
        for c in range(self.PLANE_SIZE - 1):
            yield 32

    def pat_mandel160x100(self):
        """a 160x100 SGR (C Plane) image of the Mandelbrot set."""
        s = [ord(x) - 33 for x in MANDEL1_160x100.decode('base64').decode('zip')]
        for x in range(0, len(s), 2):
            yield s[x] << 8 | s[x+1]

        for c in range(self.PLANE_SIZE - (len(s) // 2)):
            yield 0

    def pat_b256(self):
        """values 0..255 repeated."""
        for c in range(self.PLANE_SIZE):
            yield (33 + (c & 0x7f))

    def pat_romfont(self):
        """render the ROM font."""
        for c in open(os.path.join(basedir, '..', 'emulator', 'romfont.fnt'), 'rb').read():
            yield ord(c)


if __name__ == '__main__':
    Patterns().run()
