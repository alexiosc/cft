#!/usr/bin/env python3

import os
import sys
import array
import shutil
import pprint
import itertools
import romtables
import threading


# # Generate an Even Parity lookup (cache) table
# parity_table = dict()
# for n in range(64):
#     # Turn it into a binary string, count set bits. If they're odd, our parity
#     # bit will be be 1, making the total number of bits even. Voila, even
#     # parity. Invert the parity bit for odd parity.
#     parity_table[n] = len(bin(n)[2:].replace('0', '')) & 1



# 2019 ALU
#
# The original ALU supported ADD, AND, OR, XOR, 1- and 4-bit left and right
# rotations, and negation (NOT).
#
# The 2019 ALU has a serial shifter/rotator, so only NOT is left of the
# original unary operations. The four binary ops and NOT are now in one ROM.
#
# Inputs:
#
# Carry/FL in:       1 bit
# AC (A Port):      16 bits
# B Port:           16 bits
# Operation:         3 bits
# -------------------------
# Total             34 bits
#
# Outputs:
#
# Y (result):       16 bits
# FL Out:            1 bit
# FL write enable:   1 bit¹
# FV Out:            1 bit
# FV write enable:   1 bit¹
# --------------------------
# Total             20 bits
#
# ¹ May be decoded from OP?
#
# Since this is obviously too big a table for one ROM, it's split into
# three. This adds the need to propagate carry, so one additional input and one
# additional output for the first two ROMs. So, the task is broken out into:
#
# ROM 0                    ROM 1                    ROM 2                
# -----------------------------------------------------------------------------
# FL-IN          1 bit     Carry in 1     1 bit     Carry in 2        1 bit 
# A[5:0]         6 bits    A[11:6]        6 bits    A[12:15]          4 bits
# B[5:0]         6 bits    B[11:6]        6 bits    B[12:15]          4 bits
# OP             3 bits    OP             3 bits    OP                3 bits
# -----------------------------------------------------------------------------
# Y[5:0]         6 bits    Y[11:6]        6 bits    Y[12:15]          4 bits
# Carry out 1    1 bit     Carry out 2    1 bit     FL-OUT            1 bit 
# X0 (spare 0)   1 bit     X1 (spare 1)   1 bit     FL latch strobe¹  1 bit
#                                                   FV-OUT            1 bit
#                                                   FV latch strobe¹  1 bit
#
# ¹ Again, it may be possible to decode this from the OP field, but not
#   necessarily desirable.
#
# ROMs 0 and 1 need 16 bits of addresses and 6 bits of output each. 512 kbit
# parts are the smallest candidate.
#
# ROM 2 needs 12 bits of addresses and 8 bits of output. 32k bit parts are
# best.
#
# Because ROMs propagate carry the naïve way, they should be fast. 50ns parts
# will work, barely: it means an addition needs 150ns of the 250ns processor
# cycle. The microcode store needs around 50ns to get the next microinstruction
# (because that's another ROM!), so things are tight.
#
# Luckily, the major registers use latching, so no matter how late in the
# processor cycle the result arrives, it'll be registered. And if for some
# reason we need an extra cycle for some operations, so be it.
#
#
# NOTES ON OVERFLOW DETECTION
#
# We define overflow as SIGNED number overflow ONLY. The unsigned
# ‘overflow’ bit is the L register output, which is technically equal
# the carry-out from the addition.
#
# Signed number overflow is set iff the sign of the operands is the
# same, but the sign of the result is different from the operands':
#
# A B   Y   V
# -----------
# + +   +   0
# + +   -   1
# + -   +   0
# + -   -   0
# - +   +   0
# - +   -   0
# - -   +   1
# - -   -   0
#
# Since this calculation depends on the highest order bits of the
# operands and result, it happens in ROM 2, and this discussion is
# about 4-bit quantities.
#
# We have one complication: the carry in bit. In essence, we add three
# numbers: a + b + carry in. The first two are in a 4-bit domain, the
# last is a signed number in a 1-bit domain and this creates edge
# cases.
#
# Because I'm a lazy bastard, rather than work out a full truth table, I'm
# going to take advantage of the fact that the computer running this program
# can do arithmetic with more than 4 bits. The op_add4 function below
# calculates addition results for ROM2 in the 4-bit domain. It also calculates
# it in the 64-bit signed integer domain and compares the results. If the
# results differ, it indicates that the operation can't be represented in 4
# bits, and this is the definition of an arithmetic overflow.
#
# The most complicated thing here is the tosigned4 function, that converts a
# 4-bit unsigned integer to a native signed integer by calculating the two's
# complement polynomial: b₀⁰ + b₁¹ + b₂² - b₃³.

sign = lambda n, bits: int((n & (1 << (bits - 1))) != 0)

tosigned4 = lambda x: (x & 7) - (x & 8) # The parentheses are required

def op_add6(a, b, c, bits, mask):
    y = (a & mask) + (b & mask) + (c & 1)
    fl = int(y > mask)

    # result, set_fl, fl, set_fv, fv, reserved bit
    return y, 1, fl, 0, 0, 0


def op_add4(a, b, c, bits, mask):
    y = ((a & mask) + (b & mask) + (c & 1))
    fl = int(y > mask)
    y = y & mask

    # Calculate overflow in the formal way, by checking the 4-bit arithmetic
    # using a longer bit width. Easy, we have 64 bits.
    result = tosigned4(a) + tosigned4(b) + c
    fv = int(tosigned4(y) != result)

    # if a in [ 15, 0] and b in [15, 0] and c == 1:
    #     print("FV: {} | {:04b} + {:04b} + {} -> {:08b} ({:3d}). Signed: {} + {} + {} = {}.".
    #           format(fv,
    #                  a, b, c, y, tosigned4(y),
    #                  tosigned4(a), tosigned4(b), c, result))
    #     #sys.exit(0)

    # result, set_fl, fl, set_fv, fv, reserved bit
    return y, 1, fl, 1, fv, 0

    # result, set_fl, fl, set_fv, fv, reserved bit
    return y, 1, fl, 0, 0, 0

def op_and(a, b, c, bits, mask):
    y = (a & mask) & (b & mask)
    # result, set_fl, fl, set_fv, fv
    return y, 0, 0, 0, 0, 0

def op_or(a, b, c, bits, mask):
    y = (a & mask) | (b & mask)
    # result, set_fl, fl, set_fv, fv
    return y, 0, 0, 0, 0, 0

def op_xor(a, b, c, bits, mask):
    y = (a & mask) ^ (b & mask)
    # result, set_fl, fl, set_fv, fv
    return y, 0, 0, 0, 0, 0

def op_not(a, b, c, bits, mask):
    y = a ^ mask
    # result, set_fl, fl, set_fv, fv
    return y, 0, 0, 0, 0, 0

def op_rsvd(a, b, c, bits, mask):
    return 0, 0, 0, 0, 0, 0


OPS = ['ADD', 'AND', 'OR ', 'XOR', 'NOT', 'OP5', 'OP6', 'OP7']


class AluRom6(threading.Thread):
    """ALU ROMs, 2019 edition.
    
    This is the 6-bit ROM image, i.e. ROM0 and ROM1."""

    # The order match the RADDRs of the ALU (raddr = op | 0b10000).
    ops = [
        op_add6,                # 0: Full addition
        op_and,                 # 1: AND (and even parity?)
        op_or,                  # 2: OR (and odd parity?)
        op_xor,                 # 3: XOR (and odd parity?)
        op_not,                 # 4: Bitwise negation (does not modify L/V)
        op_rsvd,                # 5: reserved
        op_rsvd,                # 6: reserved
        op_rsvd                 # 7: reserved
    ]

    def __init__(self, tt):
        self.tt = tt
        self.bits = 6
        self.mask = 0x3f

        #print "Thread %s: (%d,%d)" % (self.name, a0, a1)


    def calculate(self, a, b, c, xn_in, op, bits, mask, tt):
        y, _1, carry_out, _2, _3, xn = self.ops[op](a & mask, b & mask, c, bits, mask)
        # if carry_out:
        #     print("*** a+b+c=0 L", a, b, c, y, carry_out)
        return tt.make_vector(tt.outputs, y=y, xn=xn, l=carry_out)


    def getflags(self, x):
        flags = ""
        flags += ' ' + "-L"[int(x & 0x40 > 0)]
        flags += ' ' + "-V"[int(x & 0x80 > 0)]
        return flags


    def run(self):
        """
        Run the thread.
        """
        bits = self.bits
        mask = self.mask
        tt = self.tt

        if debug:
            print(" ADDR   DATA  |   A   B  C  XN  OP        |   Y  FLAGS")

        # Address format: op:3, cin:1, xn_in:1, b:6, a:6 (in bits)
        maxval = 1 << bits
        prod = itertools.product(range(8),       # OP
                                 range(2),       # Xn_in (reserved, don't care for now)
                                 range(2),       # C
                                 range(maxval),  # B
                                 range(maxval))  # A
        for op, xn_in, c, b, a in prod:
            # Calculate the address. xn_in isn't used yet and is a don't care value.
            addr = tt.make_vector(tt.inputs, op=op, c=c, a=a, b=b, xn_in=xn_in)
            data = self.calculate(a, b, c, 0, op, bits, mask, tt)
            # if (a == 15 and b == 0 and c == 1):
            #     print("ADDR={:x}, DATA={:b}".format(addr, data))
            tt.put(addr, data)
        
            if debug:
                print('{:>05x}     {:>02x}  |  {:>02x}  {:>02x}  {}   {}  {:>02x} ({:3.3})  |  {:>02x}  {}'.format(
                    addr, data,
                    a, b, c, xn_in, op, OPS[op],
                    data & mask, self.getflags(data)))
            else:
                tt.progress(dt=5)


class AluRom4(AluRom6):
    """ALU ROMs, 2019 edition.
    
    This is the 4-bit ROM image, i.e. ROM2."""

    def __init__(self, tt):
        self.tt = tt
        self.bits = 4
        self.mask = 0xf

        # Patch the ops table to use the 4-bit addition with overflow
        # detection.
        self.ops[0] = op_add4


    def run(self):
        """
        Run the thread.
        """
        bits = self.bits
        mask = self.mask
        tt = self.tt

        if debug:
            print(" ADDR   DATA  |   A   B  C  XN  OP        |   Y  FLAGS")

        # Address format: op:3, cin:1, xn_in:1, b:6, a:6 (in bits)
        maxval = 1 << bits
        prod = itertools.product(range(8),       # OP
                                 range(2),       # Xn_in (reserved, don't care for now)
                                 range(2),       # C
                                 range(4),       # unused_b
                                 range(maxval),  # B
                                 range(4),       # unused_a
                                 range(maxval))  # A
        for op, xn_in, c, pad_b, b, pad_a, a in prod:
            # Calculate the address. xn_in isn't used yet and is a don't care value.
            addr = tt.make_vector(tt.inputs, op=op, c=c, a=a, pad_a=pad_a, b=b, pad_b=pad_b, xn_in=xn_in)
            data = self.calculate(a, b, c, 0, op, bits, mask, tt)
            # if (a == 15 and b == 0 and c == 1):
            #     print("ADDR={:x}, DATA={:b}".format(addr, data))
            tt.put(addr, data)
        
            if debug:
                print('{:>05x}     {:>02x}  |  {:>02x}  {:>02x}  {}   {}  {:>02x} ({:3.3})  |  {:>02x}  {}'.format(
                    addr, data,
                    a, b, c, xn_in, op, OPS[op],
                    data & mask, self.getflags(data)))
            else:
                tt.progress(dt=5)


    def calculate(self, a, b, c, xn_in, op, bits, mask, tt):
        y, setl, l, setv, v, xn = self.ops[op](a & mask, b & mask, c, bits, mask)
        # if setl and l:
        #     print("*** a={a}, b={b}, c={c}, a+b+c={y}, setl={setl}, l={l}, setv={setv}, v={v}".format(
        #           **locals()))

        # The setl and setv outputs from ROM2 are active low, so invert them.
        setl = setl ^ 1
        setv = setv ^ 1
        return tt.make_vector(tt.outputs, y=y, setl=setl, l=l, setv=setv, v=v)


    def getflags(self, x):
        flags = ''
        # bits 0x80 and 0x20 are active low!
        if x & 0x80:
            # so this means flag clear
            flags += '..'
        else:
            # ...and this means flag set
            flags += 'L' + '01'[int(x & 0x40 > 0)]

        if x & 0x20:
            flags += '..'
        else:
            flags += 'V' + '01'[int(x & 0x10 > 0)]
        return flags


###############################################################################
#
# GENERATE ROMS
#
###############################################################################

# Set debugging.

try:
    debug = False
    #debug = True
    print("Generating ROM 0 & 1 (6-bit)")
    ROM01 = romtables.FunctionTable('op:3 xn_in c b:6 a:6', 'xn l y:6', singleROM=True)
    AluRom6(ROM01).run()
    ROM01.report()
    
    debug = False
    #debug = True
    print("Generating ROM 2 (4-bit)")
    ROM2 = romtables.FunctionTable('op:3 xn_in c pad_b:2 b:4 pad_a:2 a:4', 'setl l setv v y:4', singleROM=True)
    AluRom4(ROM2).run()
    ROM2.report()

except KeyboardInterrupt:
    print("Interrupted.")
    sys.exit(1)

except BrokenPipeError:
    sys.exit(0)


###############################################################################
#
# WRITE OUTPUT
#
###############################################################################

print('Writing Verilog files.')
ROM01.writeVerilog('alu-rom-00')
os.rename('alu-rom-00-00.list', 'alu-rom-00.list')
shutil.copy('alu-rom-00.list', 'alu-rom-01.list')

ROM2.writeVerilog('alu-rom-02')
os.rename('alu-rom-02-00.list', 'alu-rom-02.list')

print('Writing binary images.')
ROM01.writeBin('alu-rom-00')
os.rename('alu-rom-00-00.bin', 'alu-rom-00.bin')
shutil.copy('alu-rom-00.bin', 'alu-rom-01.bin')

ROM2.writeBin('alu-rom-02')
os.rename('alu-rom-02-00.bin', 'alu-rom-02.bin')

# End of file.
