=Front Panel Notes=

The front panel should probably have to be made first, probably using
a temporary construction. This will:

* Aggregate signals so that it'll be easier to attach logic analyser
  or oscilloscope probes.

* Provide debugging facilities.

* Allow for early testing on a unit-by-unit basis.


=Final Front Panel=

Ideally, I'd like to display:

* AC.
* PC.
* AR.
* DR.
* IR.
* Output register for data.
* AEXT.

Also:

* Power on.
* Running.
* Fetching.
* Executing.
* MEM.
* I/O.
* R.
* W.
* The 8 IRQ lines.
* L.
* Z.
* N.
* V.
* I (IRQs allowed).
* IRQ (IRQ in)
* IRQS (IRQ being serviced).
* Banking enabled.

Microcode:

* microaddress (includes uPC, part of IR, V, L, INTS, Reset).
* Signal breakout (24 bits!).

Switches:

* S17: Power switch (key, 3 key removable positions, DP): off, on, panel
  lock (most switches disabled, most lights off)

* S1-16: 16 toggle switches for data

* S19: Load address (switches -> PC, DR, AR)

* S20 Load data (switches -> A)
* S20 Load instruction (switches -> IR)

* S21 Memory deposit
* S21 Memory deposit + increment

* S22 Memory read
* S22 Memory read + increment

* S23 I/O deposit
* S23 I/O deposit + increment

* S24 I/O read
* S24 I/O read + increment

* S28 Run
* S28 Stop

* S18 reset

* S29 Step (stops at end of next fetch)
* S29 Microstep

* S30 Fast
* S30 Slow

* S31 Slow speed (slow/medium/fast)

* S32 RAM/ROM (enable/disable ROM at high 32kW)

* S25 Address: PC/AR

* S26 Data: AC/IBUS/Output register

* S27 MFD: IR/DR/uAddr

* 

=Functionality=

* Calculate fetch signal (uPC == 2, but configurable with jumpers?)
* Must contain its own address register
* Input register (I/O-mapped)
* Output register (I/O-mapped)

=Clock Speeds=

The panel gives us nine clock speeds:

1. FAST
2. SLOW 1
3. SLOW 2

A. DIVIDE 1:X
B. DIVIDE 1:W
C. DIVIDE 1:Z

These are on two switches, so there are nine combinations.

The slowest speeds should allow easy debugging of code and microcode
respectively: around 100 Hz for code (i.e. around 6-14 instructions
per second), and around 10 Hz for microcode (10 microinstructions per
second).

Slowing down is done using a 74LS292 divider. This provides a division
by 2^n, where n is a five-bit binary number. The minimum divider is
4. The clock phase generator divides the raw clock by 4, so for a 4MHz
system clock we need 4MHz x 4 x 4 = 64MHz raw clock.

==Optional==

The 'RUN' light is a tri-colour LED. It should indicate the speed as follows:

* Fastest speed (1A): green
* Speeds (1B, 1C, 2A, 2B, 2C): yellow
* Speeds (3A, 3B, 3C): red

Alternatively, a red LED by the switches should light if running at
anything other than the fastest speed.


=Autorepeat=

I want to use this for the Step (and microStep?) switches for easier
debugging. The truth table should be like this:

=!SAFE=

Controls that influence machine state should be locked out while the
processor is running. These controls should also be locked out when
the panel is locked.  
		       
		      		     
=Layout= 			     
				  	      
There are 50 ICs on the front panel board at last count. They must be
split into three or four groups:
			       	   
* The Control Bus-side board.  
* The Expansion Bus-side board.	
* The LED board (LED buffers)  
* The front panel board.     

However, to avoid transmission line effects for processor control
signals, it may be best to put LED buffers on a board near the
processor, and have the LED board simply host the lights. Note: this
would add a large number of '540/541 ICs and 8-pin headers.



		     
=Panel V4 Layout=

32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
:  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :
                        15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
                        |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |
() () () () () () () .. () () () () () () () () () () () () () () () () .. () () () () () () () () 

() () () () () () () .. () () () () () () () () () () () () () () () () .. () () () () () () () () 

EE .. MM IO RR WW .. .. 18 .. II II .. LL LL .. DR AC PC .. IF IF IF IF .. WU WU WU .. RU RU RU RU 

RR SS FF EE II .. .. .. PC PC PC PC PC PC PC PC PC PC PC PC PC PC PC PC .. .. .. .. .. .. .. .. .. 

NN ZZ VV II LL .. .. .. AC AC AC AC AC AC AC AC AC AC AC AC AC AC AC AC .. .. .. .. .. .. .. .. .. 

uB uB uB uB .. .. .. .. IR IR IR IR IR IR IR IR IR IR IR IR IR IR IR IR .. .. .. .. .. .. .. .. .. 

                        OR OR OR OR OR OR OR OR OR OR OR OR OR OR OR OR .. .. .. .. .. .. .. .. .. 

xx xx xx    xx xx xx    SR SR SR SR SR SR SR SR SR SR SR SR SR SR SR SR    xx xx xx xx xx xx xx xx
                        |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |
                        15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
	    
		  
32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
:  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :
                        15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
                        |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |
() () () () () () () .. () () () () () () () () () () () () () () () () .. () () () () () () () () 

() () () () () () () .. () () () () () () () () () () () () () () () () .. () () () () () () () () 

EE .. MM IO RR WW .. .. 18 .. II II .. LL LL .. DR AC PC .. IF IF IF IF .. WU WU WU .. RU RU RU RU 

RR SS FF EE II .. .. .. PC PC PC PC PC PC PC PC PC PC PC PC PC PC PC PC .. .. .. .. .. .. .. .. .. 

NN ZZ VV II LL .. .. .. AC AC AC AC AC AC AC AC AC AC AC AC AC AC AC AC .. .. .. .. .. .. .. .. .. 

uB uB uB uB .. .. .. .. IR IR IR IR IR IR IR IR IR IR IR IR IR IR IR IR .. .. .. .. .. .. .. .. .. 

                        OR OR OR OR OR OR OR OR OR OR OR OR OR OR OR OR .. .. .. .. .. .. .. .. .. 

xx xx xx    xx xx xx    SR SR SR SR SR SR SR SR SR SR SR SR SR SR SR SR    xx xx xx xx xx xx xx xx
                        |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |
                        15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
	    
		  

       	       	     
32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
:  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :
                           15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
                           |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |
() () () () () () () ()    () () () () () () () () () () () () () () () ()    () () () () () () ()

() () () () () () () ()    () () () () () () () () () () () () () () () ()    () () () () () () ()

MM IO RR WW .. .. .. ..    ND 18 .. II II LL LL .. DR AC PC .. IF IF IF IF .. WU WU WU RU RU RU RU 

BB BB BB BB BB BB BB BB    PC PC PC PC PC PC PC PC PC PC PC PC PC PC PC PC    () () () () () () ()

EE .. NN ZZ VV II .. LL    AC AC AC AC AC AC AC AC AC AC AC AC AC AC AC AC    () () () () () () ()

                           IR IR IR IR IR IR IR IR IR IR IR IR IR IR IR IR    () () () () () () ()

                           OR OR OR OR OR OR OR OR OR OR OR OR OR OR OR OR    () () () () () () ()
--------------------------------------------------------------------------------------------------
xx xx xx xx xx xx xx xx    SR SR SR SR SR SR SR SR SR SR SR SR SR SR SR SR    xx xx xx    xx xx xx
                           |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |
                           15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
	    
		  

       	       	     
32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
:  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :
                                                   15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
                                                   |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |
() () () () () () () ()    () () () () () () ()    () () () () () () () () () () () () () () () ()

() () () () () () () ()    () () () () () () ()    () () () () () () () () () () () () () () () ()

() () () () () () () ()    ND MM IO RR WW 18 II II LL LL DR AC PC IF IF IF IF WU WU WU RU RU RU RU

() () () () () () () ()    () () () () () () ()    OR OR OR OR OR OR OR OR OR OR OR OR OR OR OR OR

() () () () () () () ()    () () () () () () ()    PC PC PC PC PC PC PC PC PC PC PC PC PC PC PC PC

                           () () () () () () ()    AC AC AC AC AC AC AC AC AC AC AC AC AC AC AC AC

                           .. .. .. uB uB uB uB    IR IR IR IR IR IR IR IR IR IR IR IR IR IR IR IR
--------------------------------------------------------------------------------------------------
xx xx xx xx xx xx xx xx    xx xx xx    xx xx xx    SR SR SR SR SR SR SR SR SR SR SR SR SR SR SR SR
                                                   |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |
                                                   15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
	    
		  
=Panel v5 Operation=

The switches are 

Run by a sequencer following this algorithm:

* Sample opcode


==State Machine==

8 states, 3 bits.

Transition table:

      To
      0  1  2  3  4  5  6  7
From
  0   a  b  .  .  .  .  .  .    Idle
  1   .  .  c  .  .  .  .  .    Transaction, step 1
  2   .  .  .  c  .  .  .  .    Transaction, step 2
  3   .  .  .  .  c  .  .  .    Transaction, step 3
  4   .  .  .  .  .  c  .  .    Transaction, step 4
  5   .  .  .  .  .  .  c  .    Transaction, step 5
  6   .  .  .  .  .  .  .  c    Transaction, step 6
  7   a  d  .  .  .  .  .  e    Autorepeat timer


(a) If SWSTROBE# is high
(b) If SWSTROBE# is low
(c) PCLK
(d) Timer has expired, SWSTROBE# is high.
(e) Timer not expired, SWSTROBE# is low.

State 7 transitions:

TIMER-EXPIRED   SWITCH-DOWN   NEW-STATE  S2 S1 S0
-------------------------------------------------
       N             N            0       0  0  0
       N             Y            1       0  0  1
       Y             N            0       0  0  0
       Y             Y            7       1  1  1


Start/Stop State machine (and clock selection):

* Stop must be synchronous.
* So, always stop on rising edge of EXEC, when CLK1 is low (or falling edge of
  CLK4)
* To avoid glitches, start must be synchronous to the falling edge of the
  selected slow clock.
* Latch clock selection only when stopped (?).

* Start conditions:
  - START-RUNNING (level, async)
  - OP-RUN# (level/falling edge, Step and uStep swithces assert this)

* Stop conditions:
  - START-HALTED (level, async)
  - OP-STOP# (level/falling edge)
  - FPHALT# (falling edge)
  - ENDSTEP (rising edge)


RUNNING   START-RUNNING   START-HALTED   OP-RUN#   OP-STOP#   FPHALT#   ENDSTEP     STOP  ASYNC-START#   ASYNC-STOP#   Notes
--------------------------------------------------------------------------------- -----------------------------------------------------------------
   X            .               .           .         .          .         .          .        .             .        No operation, no change.
--------------------------------------------------------------------------------- -----------------------------------------------------------------
   X            0               .           X         X          X         X          .        0             .        Power on (start)
   X            .               0           X         X          X         X          .        .             0        Power on (halted)
--------------------------------------------------------------------------------- -----------------------------------------------------------------
   0            .               .           0         X          X         X          .        0             .        Stopped, START operated
   1            .               .           0         X          X         X          .        .             .        Running, START operated (NOP)
--------------------------------------------------------------------------------- -----------------------------------------------------------------
   0            .               .           X         0          X         X          .        .             .        Stopped, STOP operated (NOP)
   0            .               .           X         X          0         X          .        .             .        Stopped, HALT instruction (NOP)
   0            .               .           X         X          X         1          .        .             .        Stopped, end of STEP (NOP)
   1            .               .           X         0          X         X          1        .             .        Running, STOP operated
   1            .               .           X         X          0         X          1        .             .        Running, HALT instruction
   1            .               .           X         X          X         1          .        .             0        Running, end of STEP
--------------------------------------------------------------------------------- -----------------------------------------------------------------
. = not asserted
1/0 = asserted
X = don't care

STOP = (RUNNING == 1 && OPSTOP == 0) || (RUNNING == 1 && FPHALT == 0)
ASYNC-STOP# = !((START-HALTED == 0) || (ENDSTEP == 1))
ASYNC-START# = !((START-RUNNING == 0) || (OP-RUN# == 0))




Stepping:

Three state (2-bit) state machine

State 0: not stepping.
State 1: instruction stepping.
State 2: microstepping.
State 3 is not possible, but exists to provide an immediate transition to state 0.

    S0 S1 S2 S3
S0   a  b
S1   c  d
S2   c     d
S3   e

a: No input (idle)
b: OPSTEP# asserted
c: ENDSTEP asserted
d: Still stepping
e: Always


START -> 01
uSTEP -> 10
STEP ->  11

b0 = START == 0 || STEP == 0
b1 = uSTEP == 0 || STEP == 0
       _  __  _
    AC AC AC AC
 B  
~B

b0 = (uSTEP == 0) || (RUN == 0)
b1 = (STEP == 0) || (RUN == 0)


Memory cycle truth table
____ ____ ___  ___
MEMW MEMR IOW  IOR  MEM  IO   R    W    T1   T2   T12  T4   T5   T45  RPC  WAR  RAC  WAC  MEM  IO   R    W   Notes
------------------  ------------------------------------------------  --------------------------------------------------------
1    1    1    1    0    0    X    X    X    X    X    X    0    0    0    0    0    0    0    0    0    0   Idle
1    1    1    1    X    X    0    0    X    X    X    X    0    0    0    0    0    0    0    0    0    0   Idle
------------------  ------------------------------------------------  --------------------------------------------------------
0    X    X    X    1    0    0    1    0    0    0    0    0    0    0    0    0    0    0    0    0    0   Idle
0    X    X    X    1    0    0    1    1    0    1    0    0    0    1    1    0    0    0    0    0    0   AR <- PC (setup)
0    X    X    X    1    0    0    1    0    1    1    0    0    0    1    0    0    0    0    0    0    0   AR <- PC (hold)
0    X    X    X    1    0    0    1    0    0    0    1    0    1    0    0    1    0    1    0    0    1   Bus write (setup)
0    X    X    X    1    0    0    1    0    0    0    0    1    1    0    0    1    0    1    0    0    0   Bus write (hold)
------------------  ------------------------------------------------  --------------------------------------------------------
X    0    X    X    1    0    1    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0   Idle
X    0    X    X    1    0    1    0    1    0    1    0    0    0    1    1    0    0    0    0    0    0   AR <- PC (setup)
X    0    X    X    1    0    1    0    0    1    1    0    0    0    1    0    0    0    0    0    0    0   AR <- PC (hold)
X    0    X    X    1    0    1    0    0    0    0    1    0    1    0    0    0    1    1    0    1    0   Bus read (setup)
X    0    X    X    1    0    1    0    0    0    0    0    1    1    0    0    0    0    1    0    1    0   Bus read (hold)
------------------  ------------------------------------------------  --------------------------------------------------------
X    X    0    X    0    1    0    1    0    0    0    0    0    0    0    0    0    0    0    0    0    0   Idle
X    X    0    X    0    1    0    1    1    0    1    0    0    0    1    1    0    0    0    0    0    0   AR <- PC (setup)
X    X    0    X    0    1    0    1    0    1    1    0    0    0    1    0    0    0    0    0    0    0   AR <- PC (hold)
X    X    0    X    0    1    0    1    0    0    0    1    0    1    0    0    1    0    0    1    0    1   Bus write (setup)
X    X    0    X    0    1    0    1    0    0    0    0    1    1    0    0    1    0    0    1    0    0   Bus write (hold)
------------------  ------------------------------------------------  --------------------------------------------------------
X    X    X    0    0    1    1    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0   Idle
X    X    X    0    0    1    1    0    1    0    1    0    0    0    1    1    0    0    0    0    0    0   AR <- PC (setup)
X    X    X    0    0    1    1    0    0    1    1    0    0    0    1    0    0    0    0    0    0    0   AR <- PC (hold)
X    X    X    0    0    1    1    0    0    0    0    1    0    1    0    0    1    1    0    1    1    0   Bus read (setup)
X    X    X    0    0    1    1    0    0    0    0    0    1    1    0    0    1    0    0    1    0    0   Bus write (hold)
------------------  ------------------------------------------------  -------------------------------------------------------

T           T1    T2        T4    T5
    ______      ____________________
T1        \____/
    ______           _______________
T12       \_________/
    _____________________      _________
T4                       \____/
    _____________________           ____
T45                      \_________/


WAR = T1 * (MEMW + MEMR + IOW + IOR)
RPC = T12 * (MEMW + MEMR + IOW + IOR)
MEM = T45 * (IOW + IOR)
IO  = T45 * (MEMW + MEMR)
WAC = T4 * (MEMR + IOR)
R   = T45 * (MEMR + IOR)
RAC = T45 * (MEMW + IOW)
W   = T4 * (MEMW + IOW)
INCPC = T4 * FPINC

Supplemental:
WPC = od_not(and(T4#, OP_LDADDR)
WAC = od_not(and(T4#, OP_LDAC)
WIR = od_not(and(T4#, OP_LDIR)




=Combination PFP/DEB: Debugging Panel (SDP?)=

* Programmer's Front Panel
* Virtual Front Panel
* Lights-out management as a side-effect
* Processor Debugging
* System Debugging
* Should operate without processor (?)
* Uses a microcontroller
* I/O using shift registers

==Layout==

Use two boards. One for expansion bus (AB out, DB in/out shift regs), one for
control bus.

==Commands==

* Power on/off: !POWERON
* Read panel lock switch
* Reset: !FPRESET
* Run/Stop state machine: FPCLKEN, FPUSTEP
    * Run
    * Stop (with external FF)
    * Step (with external FF)
    * Microstep (with external FF)
* Select clock speed (full/slow/creep)
* Vary slow/creep clock speed
* Read SR
* Load IR: WIR#
* Load PC: WPC# + WAR#
* Load AC: WAC#
* Memory read/write (+inc)
* I/O read/write (+inc)
* IFR1/6

* Display machine status
* Trace (DEBUGON)
* Halt
* PRINTx etc DEB extensions
* Breakpoints?

* Read/write memory
* Binary/text dumping
* Set LEDs
* Set echo
* Set halt on fail
* Set address
* Set count
* Read from memory or I/O
* Write to memory or I/O
* Reset the panel/DEB board

* Address decoding: occupy 32 I/O addresses
* Wait states

===Modes===

Independent mode (no processor installed): write to AB/DB. Needs 4-5 more ICs.

Processor mode: operate the processor via the IBUS and control lines. Can't
diagnose boards without processor present (dangerous).

===Autodetect CPU===

Check signals to see if CPU is present.

===Autodetect Bus Hold===

Check stickiness of buses to detect if bus hold is present. Use a FET to enable
pull-ups for bus inputs if not.
