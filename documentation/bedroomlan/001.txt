The CFT is a long-term project built in my [[w:Copious Free Time]], hence the name. It's a self-designed, self-built Sixties-style 16-bit mini computer built out of <code>74xxx</code> integrated circuits. Currently, this page is nothing but a placeholder, but I hope to use it as a starting point to documenting the project's progress (of which there's been plenty).

==What is it?==

Here's the obligatory bullet point list:

<ul>
<li>A CPU heavily inspired by the [[w:PDP8]].</li>
<li>16-bit word length without byte-addressable memory. Word. (see what I did there?)</li>
<li>Very basic instruction set, though much less basic than the PDP8's — since we don't use core memory, the instruction set's defining decisions would be very different anyway.</li>
<li>PDP8-style ‘microcoded’ instructions, which allows many small instructions in one. For instance, <code>RBL</code> (roll bit left) may be combined with <code>CLL</code> (clear Link/Carry) to make the <code>SBL</code> (shift bit left) instruction.
<li>Microcoded design.</li>
<li>16-bit address space (65,536 words of memory).
<li>Interrupt support.</li>
<li>Front-panel support.</li>
<li>All implemented with <code>74xxx</code> chips like those found in the Sixties and Seventies — no PALs, GALs, CPLDs or FPGAs except in any stock peripherals I happen to connect. I want it dirty, messy, and radiating heat.</li>
<li>No operating system to speak of, although a Forth 83-like language is in development and everyone knows Forth makes a great operating system.</li>
<li>A retro logo.</li>
</ul>

==The Aims=

<ul>
<li>My main aim is to make something I've wanted to for a very long time: a computer. I got to see computers in the Eighties, but the self-built computer craze bypassed me because I was living in the wrong country and without anywhere near enough money to get the components I'd have needed. Now, the same components cost much, much less, and I have all the necessary tools to get started.</li>
<li>I'd also like to relearn hardware description languages (currently Verilog as I have an inexplicable hate-hate relationship with VHDL).</li>
<li>Learn how to make dense PCBs. I'll be trusting the manufacture to a capable third party.</il>
<li>Code a Forth, something I've been looking for an excuse to do in ages.</li>
<li>In this day of fantastically high-level languages like Python, I'd like to keep (if not hone) my awareness of low-level coding.</li>
<li>Learn more about the practical side of digital electronics.</li>
<li>Get to grips with CPU design and interfacing — find out where all those seemingly stupid decisions in CPU design originate from by trying to minimise costs and PCB area.</li>
<li>Use up some of those ancient components I've been collecting.</li>
</ul>

==What do I have to Show for Myself Now?==

Not much is ready to be published, but quite a lot has been done.

<ul>
<li>A microcode assembler tool which will be published as a separate page.</li>
<li>A function table assembler for ROMs, EPROMs, EEPROMs and other non-volatile memories. This was used to assemble the ALU function tables and will also be released separately.</li>
<li>The architecture design.</li>
<li>A description of the core hardware of the processor and some basic I/O devices in Verilog. The design is not meant to be synthesised. Rather, it's composed of interlinked descriptions of 74xxx chips for verification purposes.</li>
<li>A description of the computer's bus with its pins. I already have a weathered Eurocard backplane handy.</il>
<li>Circuits corresponding to the Verilog description for the CPU.</li>
<li>PCB designs corresponding to the circuits.</li>
<li>A testbed facility for  the Verilog source, including a test suite.</li>
<li>A fast emulator for the architecture built in C, with some debugging facilities.</li>
</ul>

Currently it's a bit of a task keeping all of this in sync as I find bugs in one that influence the others, but things are slowly settling down.
