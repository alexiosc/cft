#!/usr/bin/env python3
# -*- python -*-

import os
import re
import sys
import argparse
import unittest
import testlib

def die(msg):
    sys.stderr.write(sys.argv[0] + ': ' + msg + '\n')
    sys.exit(1)
    

p = argparse.ArgumentParser()

#p.add_argument('-v', '--verbose', action='store_true',
#             help='Print out assembled code')
#p.add_argument('-l', '--leave', action='store_true',
#             help='Do not delete the test directory at the end of the test.')

p.add_argument('-l', '--list', action='store_true',
               help='List available tests and exit.')
p.add_argument('-L', '--list-xargs', action='store_true',
               help='List available tests (in raw format, for xargs) and exit.')
p.add_argument('-M', '--make-deps', action='store_true',
               help='List available tests (in raw format, for xargs) and exit.')
p.add_argument('-s', '--summary', action='store_true',
               help='Summarise test reports.')

# Filtering options
p.add_argument('-b', '--basedir', metavar='PATH', type=str, default='.',
               help='Set the testsuite base directory (default: .).')
p.add_argument('-f', '--framework',
               choices=['verilog', 'emulator', 'emu_dfp', 'hardware'],
               help='Choose emulator framework to test on. ' + \
               'May be one of verilog, emulator, emu_dfp, or hardware. Mandatory.')
#p.add_argument('-j', '--jobs', metavar='N', type='int',
#             help='Run N threads at once.')
p.add_argument('-n', '--dry-run',
               help='Do everything but run the test suites.')
p.add_argument('-k', '--keep', action='store_true',
               help='Keep sandbox subdirectories even on successful testing.')
p.add_argument('-w', '--wave', action='store_true',
               help='Log waveforms and run gtkwave to display them.')
p.add_argument('-v', '--verbose', action='store_true',
               help='Print out simulation output.')

p.add_argument(metavar='TEST-FILENAME', dest='tests', nargs='+',
               help='The test or tests to run.')

args = p.parse_args()

if sum((int(x) for x in (args.list, args.list_xargs, args.make_deps,
                         args.summary) if x)) > 1:
    sys.stderr.write('%s: options -l, -L, -M and -s are mutually exclusive.\n' % sys.argv[0])
    sys.exit(1)


# Test listing filters
shouldTest = lambda x: True

# Get list of valid tests
allTests = (os.path.basename(x) for x in testlib.listTests(args.basedir))

# Make dependency patterns
MAKEPATTERN0 = """
%sTESTS = %s
"""

MAKEPATTERN_FRAMEWORK = """
%(prefix)s%(test)s: $(REPORTDIR)/%(prefix)s%(test)s.txt

$(REPORTDIR)/%(prefix)s%(test)s.txt: %(test)s.py $(%(prefix_upper)sTESTDEPS)
\t$(RUNTESTS) -f %(framework)s $(%(prefix_upper)sTESTFLAGS) %(test)s 2>&1 | $(TEE) $@
\t@[ -z $@ ] && $(RM) $@ || true
"""

MAKEPATTERN1 = """
%(test)s: %(testlist)s
"""

def getFrameworksForTest(fname):
    """Find what frameworks this is available for. Return a list of tuples
    of framework names and prefix letters."""
    for framework, pat in testlib.FRAMEWORK_PATTERNS.items():
        if re.search(pat, fname) and shouldTest:
            yield (framework, testlib.FRAMEWORK_FLAGS[framework])
    

# List tests
if args.list:
    print("Available tests:")

    pat = testlib.FRAMEWORK_PATTERNS.get(args.framework, None)
    shouldTest = lambda x: (pat is None) or re.search(pat, x)

    for x in sorted(allTests):
        if shouldTest(x):
            print("    ", os.path.basename(x))
    sys.exit(0)

elif args.list_xargs:
    print(' '.join(x for x in sorted(allTests) if shouldTest(x)))
    sys.exit(0)

elif args.make_deps:
    allTests = list(allTests)
    fwTests = dict()
    for test in sorted(allTests):
        testlist = []
        for (framework, prefix) in getFrameworksForTest(test):
            t = '%s%s' % (prefix, test)
            testlist.append(t)
            fwTests.setdefault(prefix, []).append(t)
            prefix_upper = prefix.upper()
            print(MAKEPATTERN_FRAMEWORK % locals())
        testlist = ' '.join(testlist)
        print(MAKEPATTERN1 % locals())
    print(MAKEPATTERN0 % ('ALL', ' '.join(allTests)))
    for prefix, tests in fwTests.items():
        print(MAKEPATTERN0 % (prefix.upper(), ' '.join(tests)))
    sys.exit(0)

elif args.summary:
    testlib.summariseReports(list(allTests))
    sys.exit(0)

# Set the test name
testlib.setVerbose(args.verbose)
testlib.setKeep(args.keep)
testlib.setWave(args.wave)
#testlib.guessTestName(args.name)

if not args.framework:
    die("Option -f is mandatory")

try:
    cls = dict(v=testlib.VerilogTest,
               e=testlib.EmulatorTest)[args.framework[0]]
    testlib.setTestClass(cls)

except KeyError:
    die("Unknown framework type '%s'" % args.framework)

if not args:
    die('specify the filenames of one or more Python test programs.')

if not args.framework:
    die('specify the testing framework to use.')


allTests = tuple(allTests)
tests = []
for name in sorted(args.tests):
    test = os.path.splitext(os.path.basename(name))[0]
    if test not in allTests:
        continue
    fname = os.path.join(args.basedir, test + '.py')
    if not os.path.exists(fname):
        continue
    #print test, fname
    tests.append((test, fname))

tests = tuple(set(tests))

for test, fname in sorted(tests):
    testlib.setTestName(test)

    try:
        suite = unittest.TestSuite()
    
        # Just cause an exception if we can't open the file.
        open(fname).close()
        
        x = __import__(test)
        
        suite.addTests(unittest.TestLoader().loadTestsFromModule(x))
    
        # Run the tests.    
        unittest.TextTestRunner(verbosity=2).run(suite)

    except IOError as e:
        die(str(e))

    except KeyboardInterrupt:
        sys.stderr.write('Keyboard interrupt\n')
        sys.exit(1)

    except Exception as e:
        raise
        #sys.stderr.write('%s\n' % e.__class__.__name__)

# End of file.
