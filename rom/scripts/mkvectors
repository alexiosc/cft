#!/usr/bin/env python

import re, sys


HEADER = """// -*- cftasm -*-

///////////////////////////////////////////////////////////////////////////////
//
// ROM VECTOR TABLE
//
// WARNING: Generated automatically from vectable.asm. Please do not modify.
//
///////////////////////////////////////////////////////////////////////////////

/.pushns vt

;; System vector and trap table

"""

SYSCALLHEAD = """
;;; System Call (TRAP) definitions
"""


CONSTHEAD = """
;;; Constant definitions
"""


EQUHEAD = """
;;; Vector definitions
"""


FOOTER = """

/.popns

// End of file.
"""


PATv = r'\.word\s+(.+)\s+; [Vv]ector: \s*((\w+).*?)\n'
PATs = r'\.word\s+(.+)\s+; [Ss]ys[Cc]all: \s*((\w+).*?)\n'
PATc = r'\.word\s+(.+)\s+; [Cc]onst: \s*(\w+)'

vectors = list()
syscalls = list()
const = list()
for source in sys.argv[1:]:
    data = open(source).read()
    for vector in re.findall(PATv, data):
        vectors.append((vector[2], vector[1]))
    for vector in re.findall(PATs, data):
        syscalls.append((vector[2], vector[1]))
    for c in re.findall(PATc, data):
        const.append((c[1], c[0]))

print HEADER

for name, comment in vectors:
    #name = 'v_' + name + ':'
    #print "%-20s .word  &beef ; %s" % (name, comment)
    name = '.reg %s R @' % name
    print '                %-24s; %s' % (name, comment)

print SYSCALLHEAD

for name, comment in syscalls:
    name = '.reg %s R @' % name
    print '                %-24s; %s' % (name, comment)

print CONSTHEAD
for name, comment in const:
    #name = 'v_' + name + ':'
    #print "%-20s .word  &beef ; %s" % (name, comment)
    name = '.reg %s R @' % name
    print '                %-24s; %s' % (name, comment)

# print EQUHEAD

# for name, comment in vectors:
#     equ = name
#     #equ = name.replace('_trap', '')
#     equ = 'vec_' + equ
#     equ = equ.replace('vec__', 'vec_')
#     print ".equ\t%-20s I R v_%s" % (equ, name)

print FOOTER.rstrip()

# End of file.
